# Multi-stage build - All-in-One Container
FROM node:18-alpine AS builder

# Build Frontend
WORKDIR /app/frontend
COPY package*.json ./
RUN npm ci --ignore-scripts && npm cache clean --force
COPY . .
RUN npm run build

# Build Backend
WORKDIR /app/backend
COPY server/package*.json ./
RUN npm ci --production --ignore-scripts && npm cache clean --force
COPY server/ ./

# Production stage - Nginx + Node.js Backend
FROM nginx:alpine

# Install Node.js and wget for health checks
RUN apk add --no-cache nodejs npm wget

# Copy Nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy Frontend build
COPY --from=builder /app/frontend/dist /usr/share/nginx/html

# Copy Backend
COPY --from=builder /app/backend /app/backend
WORKDIR /app/backend

# Create startup script
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'node /app/backend/server.js &' >> /docker-entrypoint.sh && \
    echo 'nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Expose ports
EXPOSE 80 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=15s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/ && \
        wget --no-verbose --tries=1 --spider http://localhost:3001/api/vatsim/data || exit 1

# Start both services
CMD ["/docker-entrypoint.sh"]
